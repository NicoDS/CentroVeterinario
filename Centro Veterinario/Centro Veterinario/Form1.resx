<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhYGIbPz4+jBoaHMEREhPJFhcXwB4fH5UoKilrNzc3OkE/
        QQIAAAAAAAAAAAAAAABnZ2krR0hIeSgoKMUREhTgFxgY1DMzM3IAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl5eXPQUFBvQAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8BAQb/DgwQ4xgXHLYrKi2fJCMnzQwLD/8AAAD/AAAA/wAAAP8AAAD/AAAA/xsaG8pWWFcKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuLi/ZAAAA/wAACf8AAAj/AAAI/wAA
        CP8AAAj/AAAI/wAABf8AAAH/AAAA/wAAAP8AAAD/AAAA/wAACP8AAAn/AAAJ/wAACv8AAAb/AAAA/ywu
        Lp8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoZHOcAAAD/AAAJ/wAA
        CP8AAAj/AAAI/wAACP8AAAj/AAAI/wAACP8AAAj/AAAG/wAAB/8AAAn/AAAI/wAACP8AAAn/AAAJ/wAA
        B/8AAAD/ICEi4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS0pOwAAA
        AP8AAAr/AAAI/wAACP8AAAj/AAAI/wAACP8AAAj/AAAI/wAACP8AAAj/AAAI/wAACf8AAAj/AAAI/wAA
        Cf8AAAn/AAAI/wAAAP8sLC/LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB0dHZwAAAA/wAAB/8AAAj/AAAI/wAACP8AAAj/AAAI/wAACP8AAAj/AAAI/wAACP8AAAj/AAAI/wAA
        CP8AAAj/AAAJ/wAACf8AAAj/AAAA/0pITJ4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        gB/+AIAf/gCAH/4AwD/+AeA//wPwf/+H+P8=
</value>
  </data>
</root>